{"title":"Simulating data for ANOVA similar to existing dataset for analysis","markdown":{"yaml":{"title":"Simulating data for ANOVA similar to existing dataset for analysis","author":"Raju Rimal","date":"`r Sys.Date()`","draft":true,"tags":["Statistics","ANOVA"]},"headingText":"Simulation Example","containsRefs":false,"markdown":"\n\nSimulating data is used in education and research and has been an helpful tool\nfor testing, comparing and understanding concepts in practical and applied \nsetting.\n\n\n```{r, include = FALSE}\nknitr::opts_chunk$set(\n  echo = FALSE,\n  comment = NA,\n  out.width = \"100%\",\n  dev = \"svg\"\n)\nlibrary(data.table)\nlibrary(purrr)\nlibrary(ggplot2)\n\nggplot2::theme_set(ggthemes::theme_few() + theme(\n  panel.grid = element_line(color = \"#f0f0f0\")\n))\n\nset.seed(124)\n```\n\n\nOften we Analysis of Variance (ANOVA) to analyze the variances to find if \ndifferent cases results in similar outcome and if the difference is significant. \nFollowing are some simple examples,\n\n- The effect of different diets on growth of fishes\n- Comparing the height of three different species of a plant\n- Type of flour used for baking a bread\n\nThese are some common examples where in some cases data are collected by setting \nup an experiment and in other cases they are collected through sampling. \nThis article tries to explain how the ANOVA analyze the variance and in what \nsituation are they significant throught both simulated and real data.\n\nConsider the following model with $i=3$ groups and $j=n$ observations,\n\n$$y_{ij} = \\mu + \\tau_i + \\varepsilon_{ij}, \\; i = 1, 2, 3 \n\\texttt{ and } j = 1, 2, \\ldots n$$\n\nhere, $\\tau_i$ is the effect corresponding to group $i$ and \n$\\varepsilon_{ij} \\sim \\mathrm{N}(0, \\sigma^2)$, the usual assumption of \nlinear model. Simulation example below describe it in details.\n\nThis example simulates 3 datasets within each of them has 3 groups with\nwith their respective mean and standard deviation. These datasets tries to \nreplicate the `USArrest` dataset available in `dataset` package in R. The \nsimulation design is as follows,\n\n```{r, echo = TRUE, class.source = c(\"bg-info\", \"folded\")}\nsim_design <- data.table(\n  Illitracy = factor(\n    rep(c(1, 2, 3), 3),\n    labels = c(\"high\", \"medium\", \"low\")\n  ),\n  Crime = factor(\n    rep(c(1, 2, 3), each = 3),\n    labels = c(\"Murder\", \"Assault\", \"Rape\")\n  ),\n  mean = c(11, 8, 5, 214, 190, 114, 23, 21, 19),\n  sd = c(3, 4, 3, 79, 82, 55, 8, 10, 10)\n)\n\nsim_design\n```\n\nSince these data cannot contain negative values so instead of using `rnorm` \navailable in `stats` package, I will use `truncnorm` available in GitHub. There \nare other options as well which can be used such as: ...\n\nIf not installed, install the package as \n`remotes::install_github(\"olafmersmann/truncnorm\")` or \n`devtools::install_github(\"olafmersmann/truncnorm\")`.\n\nIn each group let's simulate 50 observations.\n\n```{r, echo = TRUE}\nnsim <- 50\n```\n\n```{r, echo = TRUE, class.source = c(\"bg-info\", \"folded\")}\nsim_data <- copy(sim_design)[, map2_df(mean, sd, ~ data.table(\n  Rate = truncnorm::rtruncnorm(\n    n = nsim, a = 0, b = Inf, mean = .x, sd = .y\n  ) %>% round()\n)), by = .(Illitracy, Crime)]\n\nsim_data\n```\n\nLets use this simulated dataset for fitting Anova model with `Illitracy`\nas the factor (group) variable and `Rate` as the response variable \nseparately for each crime. Also make a density plot for both simulated and \nfitted values of the `Rate` variable.\n\n## R-codes {.tabset}\n\n### Model and plot data {.tab}\n```{r, echo = TRUE, class.source = c(\"bg-info\", \"folded\")}\nmdl_fit <- sim_data[, .(\n  Fit = list(lm(Rate ~ Illitracy, data = .SD))\n), by = .(Crime)][, Summary := map(Fit, summary)]\nmdl_fit[, Anova := map(Fit, anova)]\nmdl_fit[, Tukey := map(Fit, aov) %>% map(TukeyHSD)]\n\nmdl_est <- mdl_fit[, map_df(\n  .x = Summary,\n  .f = broom::tidy,\n  conf.int = TRUE\n), by = .(Crime)]\n\nmdl_fit_df <- mdl_fit[, map_df(\n  .x = Fit,\n  .f = broom::augment\n), by = .(Crime)]\n\neff_df <- mdl_fit[, map_df(Fit, function(.fit) {\n  effects::Effect(\"Illitracy\", .fit) %>%\n    as.data.table()\n}), by = \"Crime\"]\n\ntky_df <- mdl_fit[, modify_depth(Tukey, 1, \"Illitracy\") %>%\n  as.data.table(keep.rownames = \"terms\"), by = \"Crime\"]\n```\n\n### Density plot {.tab}\n```{r, echo = TRUE, class.source = c(\"bg-info\", \"folded\")}\ndensity_plts <- split(sim_data, by = \"Crime\") %>%\n  imap(function(dta, name) {\n    ggplot(dta, aes(Rate, color = Illitracy)) +\n      geom_density(aes(linetype = \"Simulated\")) +\n      geom_density(\n        aes(linetype = \"Fitted\", x = .fitted),\n        data = mdl_fit_df[Crime == name]\n      ) +\n      geom_rug(\n        data = eff_df[Crime == name],\n        aes(x = fit)\n      ) +\n      scale_linetype_manual(\n        breaks = c(\"Simulated\", \"Fitted\"),\n        values = c(\"solid\", \"dashed\")\n      ) +\n      scale_color_brewer(palette = \"Set1\") +\n      theme(legend.position = \"bottom\") +\n      labs(\n        x = name,\n        y = \"Density\",\n        linetype = NULL\n      )\n  })\n```\n\n### Box plot {.tab}\n```{r, echo = TRUE, class.source = c(\"bg-info\", \"folded\")}\nbox_plts <- split(mdl_fit_df, by = \"Crime\") %>%\n  imap(function(dta, name) {\n    ggplot(dta, aes(Rate, Illitracy)) +\n      geom_boxplot(\n        notch = TRUE, \n        color = \"grey\",\n        outlier.colour = \"grey\"\n      ) +\n      geom_point(\n        position = position_jitter(height = 0.25),\n        color = \"grey\",\n      ) +\n      geom_pointrange(\n        aes(\n          color = \"Estimated\",\n          xmin = lower,\n          xmax = upper,\n          x = fit\n        ),\n        data = eff_df[Crime == name]\n      ) +\n      geom_point(\n        aes(color = \"True\", x = mean),\n        data = sim_design[Crime == name]\n      ) +\n      scale_color_brewer(\n        name = \"Mean\",\n        palette = \"Set1\"\n      ) +\n      theme(\n        legend.position = \"bottom\"\n      )\n  })\n```\n\n### Posthoc plot {.tab}\n```{r, echo = TRUE, class.source = c(\"bg-info\", \"folded\")}\ntky_plts <- split(tky_df, by = \"Crime\") %>%\n  imap(function(dta, name) {\n    ggplot(dta, aes(diff, terms)) +\n      geom_pointrange(\n        aes(xmin = lwr, xmax = upr, x = diff),\n        shape = 21,\n        fill = \"whitesmoke\"\n      ) +\n      geom_vline(\n        xintercept = 0,\n        linetype = \"dashed\",\n        color = \"royalblue\"\n      ) +\n      scale_color_brewer(\n        name = \"Mean\",\n        palette = \"Set1\"\n      ) +\n      labs(\n        y = \"Illitracy\",\n        x = \"Effect difference\",\n        title = \"Pairwise comparison of levels of illitracy\"\n      ) +\n      expand_limits(x = 0)\n  })\n```\n\n## Analysis {.tabset}\n\n### Murder {.tab .tabset}\n\n#### Distribution {.tab}\n\n```{r}\ndensity_plts[[\"Murder\"]]\n```\n\n#### Fit {.tab}\n\n```{r}\nmdl_fit[Crime == \"Murder\", Summary][[1]]\n```\n\n#### Effects {.tab}\n\n```{r}\nbox_plts[[\"Murder\"]]\n```\n\n#### Post-hoc {.tab}\n```{r}\ntky_plts[[\"Murder\"]]\n```\n\n### Assault {.tab .tabset}\n\n#### Distribution {.tab}\n\n```{r, out.width=\"100%\"}\ndensity_plts[[\"Assault\"]]\n```\n\nThe distribution of the high and medium illitracy is similar as contrast to low \nillitracy group in the case of assult.\n\n#### Fit {.tab}\n\n```{r}\nmdl_fit[Crime == \"Assault\", Summary][[1]]\n```\n\n#### Effects {.tab}\n\n```{r}\nbox_plts[[\"Assault\"]]\n```\n\n#### Post-hoc {.tab}\n```{r}\ntky_plts[[\"Assault\"]]\n```\n\n\n### Rape {.tab .tabset}\n\n#### Distribution {.tab}\n\n```{r}\ndensity_plts[[\"Rape\"]]\n```\n\n#### Fit {.tab}\n\n```{r}\nmdl_fit[Crime == \"Rape\", Summary][[1]]\n```\n\n#### Effects {.tab}\n\n```{r}\nbox_plts[[\"Rape\"]]\n```\n\n#### Post-hoc {.tab}\n```{r}\ntky_plts[[\"Rape\"]]\n```\n\n# Real Data Example\n\n```{r, echo = TRUE, class.source = c(\"bg-info\", \"folded\")}\narrest <- merge.data.table(\n  as.data.table(USArrests, keep.rownames = \"States\"),\n  as.data.table(\n    state.x77[, \"Illiteracy\", drop = FALSE],\n    keep.rownames = \"States\"\n  ),\n  by = \"States\"\n)\narrest[, UrbanPop := NULL]\narrest <- arrest[, lapply(.SD, as.numeric), by = \"States\"]\n\narrest[, Illiteracy := cut.default(\n  Illiteracy,\n  breaks = quantile(Illiteracy, c(0, 1/3, 2/3, 1)),\n  labels = c(\"low\", \"medium\", \"high\"),\n  include.lowest = TRUE\n)]\n\narrest <- melt.data.table(\n  data = arrest[, lapply(.SD, as.numeric), \n    by = .(States, Illiteracy)],\n  id.vars = c(\"States\", \"Illiteracy\"),\n  value.name = \"Rate\",\n  variable.name = \"Crime\"\n)\n```\n\n```{r}\nhead(arrest)\n```\n\n## Results {.tabset}\n\n```{r}\nmdl_fit <- arrest[, .(\n  Fit = list(lm(Rate ~ Illiteracy, data = .SD))\n), by = .(Crime)][, Summary := map(Fit, summary)]\nmdl_fit[, Anova := map(Fit, anova)]\nmdl_fit[, Tukey := map(Fit, aov) %>% map(TukeyHSD)]\n\nmdl_est <- mdl_fit[, map_df(\n  .x = Summary,\n  .f = broom::tidy,\n  conf.int = TRUE\n), by = .(Crime)]\n\nmdl_fit_df <- mdl_fit[, map_df(\n  .x = Fit,\n  .f = broom::augment\n), by = .(Crime)]\n\neff_df <- mdl_fit[, map_df(Fit, function(.fit) {\n  effects::Effect(\"Illiteracy\", .fit) %>%\n    as.data.table()\n}), by = \"Crime\"]\n\ntky_df <- mdl_fit[, modify_depth(Tukey, 1, \"Illiteracy\") %>%\n  as.data.table(keep.rownames = \"terms\"), by = \"Crime\"]\n```\n\n#### Distribution {.tab}\n\n```{r, out.width=\"100%\", fig.asp=0.5}\nggplot(arrest, aes(Rate, color = Illiteracy)) +\n  geom_density(aes(linetype = \"Simulated\")) +\n  geom_density(\n    aes(linetype = \"Fitted\", x = .fitted),\n    data = mdl_fit_df\n  ) +\n  geom_rug(\n    data = eff_df,\n    aes(x = fit)\n  ) +\n  scale_linetype_manual(\n    breaks = c(\"Simulated\", \"Fitted\"),\n    values = c(\"solid\", \"dashed\")\n  ) +\n  scale_color_brewer(palette = \"Set1\") +\n  theme(legend.position = \"bottom\") +\n  labs(\n    x = \"Crime\",\n    y = \"Density\",\n    linetype = NULL\n  ) +\n  facet_wrap(\n    facets = vars(Crime),\n    scales = \"free\"\n  )\n```\n\n#### Fit {.tab .tabset}\n\n##### Murder {.tab}\n```{r}\nmdl_fit[Crime == \"Murder\", Summary][[1]]\n```\n\n##### Assult {.tab}\n```{r}\nmdl_fit[Crime == \"Assault\", Summary][[1]]\n```\n\n##### Rape {.tab}\n```{r}\nmdl_fit[Crime == \"Rape\", Summary][[1]]\n```\n\n#### Effects {.tab}\n\n```{r, out.width=\"100%\", fig.asp=0.5}\nggplot(arrest, aes(Rate, Illiteracy)) +\n  geom_boxplot(\n    notch = FALSE,\n    color = \"grey\",\n    outlier.colour = \"grey\"\n  ) +\n  geom_point(\n    position = position_jitter(height = 0.25),\n    color = \"grey\",\n  ) +\n  geom_pointrange(\n    aes(\n      xmin = lower,\n      xmax = upper,\n      x = fit\n    ),\n    color = \"firebrick\",\n    data = eff_df\n  ) +\n  scale_color_brewer(\n    name = \"Mean\",\n    palette = \"Set1\"\n  ) +\n  theme(\n    legend.position = \"bottom\"\n  ) +\n  facet_wrap(facets = vars(Crime), scales = \"free_x\")\n```\n\n#### Post-hoc {.tab}\n```{r, out.width=\"100%\", fig.asp=0.5}\nggplot(tky_df, aes(diff, terms)) +\n  geom_pointrange(\n    aes(xmin = lwr, xmax = upr, x = diff),\n    shape = 21,\n    fill = \"whitesmoke\"\n  ) +\n  geom_vline(\n    xintercept = 0,\n    linetype = \"dashed\",\n    color = \"royalblue\"\n  ) +\n  scale_color_brewer(\n    name = \"Mean\",\n    palette = \"Set1\"\n  ) +\n  labs(\n    y = \"Illiteracy\",\n    x = \"Effect difference\",\n    title = \"Pairwise comparison of levels of illiteracy\"\n  ) +\n  expand_limits(x = 0) +\n  facet_wrap(facets = vars(Crime), scales = \"free_x\")\n```\n\n## Discussion\n\n\n\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"output-file":"index.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.335","fontsize":"1.2em","linestretch":1.75,"theme":{"light":["default","../../../light.scss","../../../styles.scss"],"dark":["default","../../../dark.scss","../../../styles.scss"]},"title-block-banner":false,"title":"Simulating data for ANOVA similar to existing dataset for analysis","author":"Raju Rimal","date":"`r Sys.Date()`","draft":true,"tags":["Statistics","ANOVA"]},"extensions":{"book":{"multiFile":true}}}}}